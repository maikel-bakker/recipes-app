{"version":3,"sources":["components/Recipe.tsx","components/RecipeList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Recipe","_ref","recipe","react_default","a","createElement","Fragment","className","title","description","GET_RECIPES","gql","RecipeList","_useQuery","useQuery","data","loading","error","recipes","map","key","_id","Recipe_Recipe","client","ApolloClient","link","createHttpLink","uri","concat","process","useGETForQueries","cache","InMemoryCache","App","ApolloContext","react","fallback","RecipeList_RecipeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sOAYaA,EAAiC,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAH,OAC1CC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SAASL,EAAOM,OAC/BL,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAeL,EAAOO,+BCVvCC,QAAcC,GAAG,kIAUVC,EAAuB,WAAM,IAAAC,EACLC,YAASJ,GAAlCK,EAD8BF,EAC9BE,KAAMC,EADwBH,EACxBG,QAASC,EADeJ,EACfI,MAEvB,OAAIA,EAAcd,EAAAC,EAAAC,cAAA,oBAAYY,GAC1BD,EAAgBb,EAAAC,EAAAC,cAAA,iCAGhBF,EAAAC,EAAAC,cAAA,UACKU,EAAKG,QAAQC,IAAI,SAACjB,GAAD,OACdC,EAAAC,EAAAC,cAAA,MAAIe,IAAKlB,EAAOmB,KACZlB,EAAAC,EAAAC,cAACiB,EAAD,CAAQpB,OAAQA,SCjB9BqB,EAAS,IAAIC,IAAa,CAC5BC,KAAMC,YAAe,CACjBC,IAAG,GAAAC,OAAKC,2CAAL,YACHC,kBAAkB,IAEtBC,MAAO,IAAIC,MAaAC,EAVO,WAClB,OACI9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAgBX,OAAQA,GACpBpB,EAAAC,EAAAC,cAAC8B,EAAA,SAAD,CAAUC,SAAUjC,EAAAC,EAAAC,cAAA,8BAChBF,EAAAC,EAAAC,cAACgC,EAAD,SCRIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.660a0370.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport interface IRecipe {\r\n    _id: string,\r\n    title: string;\r\n    description: string;\r\n}\r\n\r\ninterface IRecipeProps {\r\n    recipe: IRecipe;\r\n}\r\n\r\nexport const Recipe: React.FC<IRecipeProps> = ({ recipe }) => (\r\n    <React.Fragment>\r\n        <div className=\"title\">{recipe.title}</div>\r\n        <div className=\"description\">{recipe.description}</div>\r\n    </React.Fragment>\r\n)\r\n","import React from 'react';\r\nimport { Recipe, IRecipe } from './Recipe';\r\nimport { useQuery } from 'react-apollo-hooks';\r\nimport gql from 'graphql-tag';\r\n\r\nconst GET_RECIPES = gql(`\r\n    query getRecipes {\r\n        recipes {\r\n            _id,\r\n            title,\r\n            description\r\n        }\r\n    }\r\n`);\r\n\r\nexport const RecipeList: React.FC = () => {\r\n    const { data, loading, error } = useQuery(GET_RECIPES);\r\n\r\n    if (error) return <div>Error {error}</div>;\r\n    if (loading) return <div>Loading recipes...</div>;\r\n\r\n    return (\r\n        <ul>\r\n            {data.recipes.map((recipe: IRecipe) => (\r\n                <li key={recipe._id}>\r\n                    <Recipe recipe={recipe}/>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n}\r\n","import React, { Suspense } from 'react';\n\nimport { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from 'react-apollo-hooks';\n\nimport { RecipeList } from './components/RecipeList';\n\nconst client = new ApolloClient({\n    link: createHttpLink({\n        uri: `${process.env.REACT_APP_API}/graphql`,\n        useGETForQueries: true\n    }),\n    cache: new InMemoryCache()\n});\n\nconst App: React.FC = () => {\n    return (\n        <ApolloProvider client={client}>\n            <Suspense fallback={<div>Loading App...</div>}>\n                <RecipeList />\n            </Suspense>\n        </ApolloProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}